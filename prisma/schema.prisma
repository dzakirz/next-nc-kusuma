generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique @map("session_token")
  expires      DateTime

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verivication_token")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name          String?
  image         String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          Role      @default(user)

  userProfileId String?      @unique @map("user_profile_id")
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  orders        Order[]
  events        UserEvent[]
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model UserProfile {
  id String @id @default(cuid())

  firstname String
  lastname  String
  age       Int?
  gender    Gender?

  city     String?
  address  String?
  postCode String? @map("post_code")

  user User?

  @@map("user_profile")
}

model Product {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name   String
  price  Int
  desc   String @db.Text
  weight String
  stock  Int

  categoryId String      @map("category_id")
  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("product")
}

model Category {
  id String @id @default(cuid())

  name String

  products Product[]

  @@map("category")
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  totalAmount     Int    @map("total_ammount")
  method          Method
  shippingAddress String @map("shipping_address")
  status          String

  userId     String      @map("user_id")
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("order")
}

model OrderItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity   Int
  unitPrice  Int @map("unit_price")
  totalPrice Int @map("total_price")

  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_item")
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name      String
  desc      String   @db.Text
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")

  users UserEvent[]

  @@map("event")
}

model UserEvent {
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id])
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
  @@map("user_event")
}

model News {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  desc  String @db.Text

  @@map("news")
}

enum Role {
  user
  admin
}

enum Gender {
  laki_laki
  perempuan
}

enum Method {
  ambil
  antar
}
